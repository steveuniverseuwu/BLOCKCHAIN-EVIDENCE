import {
  create
} from "./chunk-3DVQFDJ7.js";
import "./chunk-HV4Z2A7F.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/multiformats/dist/src/hashes/hasher.js
var DEFAULT_MIN_DIGEST_LENGTH = 20;
function from({ name, code, encode, minDigestLength, maxDigestLength }) {
  return new Hasher(name, code, encode, minDigestLength, maxDigestLength);
}
var Hasher = class {
  name;
  code;
  encode;
  minDigestLength;
  maxDigestLength;
  constructor(name, code, encode, minDigestLength, maxDigestLength) {
    this.name = name;
    this.code = code;
    this.encode = encode;
    this.minDigestLength = minDigestLength ?? DEFAULT_MIN_DIGEST_LENGTH;
    this.maxDigestLength = maxDigestLength;
  }
  digest(input, options) {
    if (options?.truncate != null) {
      if (options.truncate < this.minDigestLength) {
        throw new Error(`Invalid truncate option, must be greater than or equal to ${this.minDigestLength}`);
      }
      if (this.maxDigestLength != null && options.truncate > this.maxDigestLength) {
        throw new Error(`Invalid truncate option, must be less than or equal to ${this.maxDigestLength}`);
      }
    }
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      if (result instanceof Uint8Array) {
        return createDigest(result, this.code, options?.truncate);
      }
      return result.then((digest) => createDigest(digest, this.code, options?.truncate));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
function createDigest(digest, code, truncate) {
  if (truncate != null && truncate !== digest.byteLength) {
    if (truncate > digest.byteLength) {
      throw new Error(`Invalid truncate option, must be less than or equal to ${digest.byteLength}`);
    }
    digest = digest.subarray(0, truncate);
  }
  return create(code, digest);
}

// node_modules/multiformats/dist/src/hashes/sha2-browser.js
function sha(name) {
  return async (data) => new Uint8Array(await crypto.subtle.digest(name, data));
}
var sha256 = from({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});
export {
  sha256,
  sha512
};
//# sourceMappingURL=multiformats_hashes_sha2.js.map
